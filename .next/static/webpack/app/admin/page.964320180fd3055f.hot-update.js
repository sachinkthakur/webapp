"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/services/auth.ts":
/*!******************************!*\
  !*** ./src/services/auth.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticateUser: function() { return /* binding */ authenticateUser; },\n/* harmony export */   checkLoginStatus: function() { return /* binding */ checkLoginStatus; },\n/* harmony export */   logoutUser: function() { return /* binding */ logoutUser; },\n/* harmony export */   storeLoginSession: function() { return /* binding */ storeLoginSession; }\n/* harmony export */ });\n/* harmony import */ var _attendance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./attendance */ \"(app-pages-browser)/./src/services/attendance.ts\");\n// Functions using localStorage are inherently client-side dependent.\n\n// For this example, admin password. NEVER do this in production for real credentials.\nconst ADMIN_PASSWORD = \"12345\";\n/**\n * Authenticates a user based on userId and password.\n * Checks against localStorage for employee data or admin credentials.\n * NOTE: Using localStorage makes this inherently client-side dependent.\n * If called during SSR without checks, it will fail.\n * Ensure this is only called from client components or within useEffect/event handlers.\n *\n * @param userId - The user ID (employee phone number or 'admin').\n * @param password - The password (only required for admin).\n * @returns Promise<boolean> - True if authentication is successful, false otherwise.\n */ const authenticateUser = async (userId, password)=>{\n    console.log('[AuthService] authenticateUser: Attempting for userId: \"'.concat(userId, '\"'));\n    const trimmedUserId = typeof userId === \"string\" ? userId.trim() : \"\";\n    try {\n        if (trimmedUserId.toLowerCase() === \"admin\") {\n            const isAdmin = password === ADMIN_PASSWORD;\n            console.log('[AuthService] authenticateUser: Admin login attempt. Password provided: \"'.concat(password ? \"******\" : \"undefined\", '\". Result: ').concat(isAdmin));\n            return isAdmin;\n        } else {\n            if (true) {\n                const employees = await (0,_attendance__WEBPACK_IMPORTED_MODULE_0__.getEmployees)();\n                const employeeExists = employees.some((emp)=>emp.phone === trimmedUserId);\n                console.log('[AuthService] authenticateUser: Employee login attempt for phone \"'.concat(trimmedUserId, '\". Result: ').concat(employeeExists));\n                return employeeExists;\n            } else {}\n        }\n    } catch (error) {\n        console.error(\"[AuthService] authenticateUser: Error during authentication:\", error);\n        return false;\n    }\n};\n/**\n * Checks if a user is currently logged in based on localStorage.\n * NOTE: Inherently client-side.\n * @returns string | null - The logged-in user ID (trimmed, and 'admin' is lowercased) or null if not logged in or empty.\n */ const checkLoginStatus = ()=>{\n    if (true) {\n        try {\n            const storedValue = localStorage.getItem(\"loggedInUser\");\n            console.log('[AuthService] checkLoginStatus: Value from localStorage: \"'.concat(storedValue, '\"'));\n            if (storedValue) {\n                const trimmedValue = storedValue.trim();\n                console.log('[AuthService] checkLoginStatus: Trimmed value: \"'.concat(trimmedValue, '\"'));\n                if (trimmedValue.toLowerCase() === \"admin\") {\n                    console.log('[AuthService] checkLoginStatus: Recognized as admin. Returning \"admin\".');\n                    return \"admin\";\n                }\n                if (trimmedValue !== \"\") {\n                    console.log('[AuthService] checkLoginStatus: Recognized as non-admin user. Returning \"'.concat(trimmedValue, '\".'));\n                    return trimmedValue;\n                }\n                console.log(\"[AuthService] checkLoginStatus: Value was empty after trim. Returning null.\");\n                // localStorage.removeItem('loggedInUser'); // Clear if empty after trim\n                return null;\n            }\n            console.log(\"[AuthService] checkLoginStatus: No value found in localStorage. Returning null.\");\n            return null;\n        } catch (error) {\n            console.error(\"[AuthService] checkLoginStatus: Error accessing localStorage:\", error);\n            return null;\n        }\n    }\n    console.warn(\"[AuthService] checkLoginStatus: Called on server-side. localStorage not available. Returning null.\");\n    return null;\n};\n/**\n * Logs the user out by removing the flag from localStorage.\n * NOTE: Inherently client-side.\n */ const logoutUser = ()=>{\n    if (true) {\n        try {\n            const oldValue = localStorage.getItem(\"loggedInUser\");\n            localStorage.removeItem(\"loggedInUser\");\n            console.log('[AuthService] logoutUser: User logged out. Previous localStorage value was \"'.concat(oldValue, '\".'));\n        } catch (error) {\n            console.error(\"[AuthService] logoutUser: Error removing item from localStorage during logout:\", error);\n        }\n    } else {}\n};\n/**\n * Stores the logged-in user's ID in localStorage.\n * If the user is 'admin' (case-insensitive), it's stored as lowercase 'admin'.\n * NOTE: Inherently client-side.\n * @param userId - The ID of the user to store.\n */ const storeLoginSession = (userId)=>{\n    if (true) {\n        try {\n            let valueToStore = typeof userId === \"string\" ? userId.trim() : \"\";\n            console.log('[AuthService] storeLoginSession: Original userId: \"'.concat(userId, '\", Trimmed for storage: \"').concat(valueToStore, '\"'));\n            if (valueToStore.toLowerCase() === \"admin\") {\n                valueToStore = \"admin\"; // Standardize to lowercase 'admin' for storage\n                console.log('[AuthService] storeLoginSession: User is admin, standardized to: \"'.concat(valueToStore, '\" for storage.'));\n            }\n            localStorage.setItem(\"loggedInUser\", valueToStore);\n            console.log('[AuthService] storeLoginSession: Successfully stored \"'.concat(valueToStore, '\" in localStorage for key \"loggedInUser\".'));\n        } catch (error) {\n            console.error(\"[AuthService] storeLoginSession: Error storing login session in localStorage:\", error);\n        }\n    } else {}\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/auth.ts\n"));

/***/ })

});