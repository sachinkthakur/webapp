"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./src/services/attendance.ts":
/*!************************************!*\
  !*** ./src/services/attendance.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEmployee: function() { return /* binding */ addEmployee; },\n/* harmony export */   deleteEmployee: function() { return /* binding */ deleteEmployee; },\n/* harmony export */   generateAttendanceCsv: function() { return /* binding */ generateAttendanceCsv; },\n/* harmony export */   getAttendanceRecords: function() { return /* binding */ getAttendanceRecords; },\n/* harmony export */   getEmployeeById: function() { return /* binding */ getEmployeeById; },\n/* harmony export */   getEmployees: function() { return /* binding */ getEmployees; },\n/* harmony export */   saveAttendance: function() { return /* binding */ saveAttendance; },\n/* harmony export */   updateEmployee: function() { return /* binding */ updateEmployee; }\n/* harmony export */ });\n// In a real application, you would replace localStorage with API calls to your backend.\n// For demonstration purposes, we'll use localStorage.\n// NOTE: Functions using localStorage are inherently client-side dependent.\n// Define the structure of an Employee\n// --- Employee Management ---\n/**\n * Fetches all registered employees from localStorage.\n * Handles potential errors during access or parsing.\n */ const getEmployees = async ()=>{\n    console.log(\"Fetching employees from localStorage\");\n    if (false) {}\n    try {\n        const employeesJson = localStorage.getItem(\"employees\");\n        return employeesJson ? JSON.parse(employeesJson) : [];\n    } catch (error) {\n        console.error(\"Error fetching or parsing employees from localStorage:\", error);\n        // Optionally clear corrupted data: localStorage.removeItem('employees');\n        return []; // Return empty array on error\n    }\n};\n/**\n * Adds a new employee to localStorage.\n * Returns the added employee (potentially with a server-assigned ID).\n */ const addEmployee = async (employeeData)=>{\n    if (false) {}\n    console.log(\"Adding employee to localStorage:\", employeeData);\n    const employees = await getEmployees();\n    // Basic validation (add more robust validation as needed)\n    if (!employeeData.employeeId || !employeeData.name || !employeeData.phone) {\n        throw new Error(\"Employee ID, Name, and Phone Number are required.\");\n    }\n    if (employees.some((emp)=>emp.employeeId === employeeData.employeeId)) {\n        throw new Error('Employee ID \"'.concat(employeeData.employeeId, '\" already exists.'));\n    }\n    if (employees.some((emp)=>emp.phone === employeeData.phone)) {\n        throw new Error('Phone number \"'.concat(employeeData.phone, '\" is already registered.'));\n    }\n    // Assign a simple unique ID for localStorage demo\n    const newEmployee = {\n        ...employeeData,\n        id: \"emp_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substring(2, 8))\n    }; // Added randomness\n    try {\n        employees.push(newEmployee);\n        localStorage.setItem(\"employees\", JSON.stringify(employees));\n        console.log(\"Employee added:\", newEmployee);\n        return newEmployee;\n    } catch (error) {\n        console.error(\"Error saving employees to localStorage:\", error);\n        throw new Error(\"Failed to save employee data.\"); // Rethrow or handle appropriately\n    }\n};\n/**\n * Updates an existing employee in localStorage.\n */ const updateEmployee = async (updatedEmployeeData)=>{\n    if (false) {}\n    console.log(\"Updating employee in localStorage:\", updatedEmployeeData);\n    let employees = await getEmployees();\n    // Basic validation\n    if (!updatedEmployeeData.id) {\n        throw new Error(\"Employee ID (internal) is required for updates.\");\n    }\n    if (!updatedEmployeeData.employeeId || !updatedEmployeeData.name || !updatedEmployeeData.phone) {\n        throw new Error(\"Employee ID, Name, and Phone Number are required.\");\n    }\n    // Check for conflicts (excluding the current employee being updated)\n    if (employees.some((emp)=>emp.employeeId === updatedEmployeeData.employeeId && emp.id !== updatedEmployeeData.id)) {\n        throw new Error('Employee ID \"'.concat(updatedEmployeeData.employeeId, '\" already exists.'));\n    }\n    if (employees.some((emp)=>emp.phone === updatedEmployeeData.phone && emp.id !== updatedEmployeeData.id)) {\n        throw new Error('Phone number \"'.concat(updatedEmployeeData.phone, '\" is already registered.'));\n    }\n    const employeeIndex = employees.findIndex((emp)=>emp.id === updatedEmployeeData.id);\n    if (employeeIndex === -1) {\n        throw new Error('Employee with internal ID \"'.concat(updatedEmployeeData.id, '\" not found.'));\n    }\n    try {\n        employees[employeeIndex] = updatedEmployeeData;\n        localStorage.setItem(\"employees\", JSON.stringify(employees));\n        console.log(\"Employee updated:\", updatedEmployeeData);\n        return updatedEmployeeData;\n    } catch (error) {\n        console.error(\"Error saving updated employees to localStorage:\", error);\n        throw new Error(\"Failed to update employee data.\"); // Rethrow or handle appropriately\n    }\n};\n/**\n * Deletes an employee from localStorage.\n */ const deleteEmployee = async (employeeInternalId)=>{\n    if (false) {}\n    console.log(\"Deleting employee from localStorage, ID:\", employeeInternalId);\n    let employees = await getEmployees();\n    const initialLength = employees.length;\n    employees = employees.filter((emp)=>emp.id !== employeeInternalId);\n    if (employees.length === initialLength) {\n        console.warn('Employee with internal ID \"'.concat(employeeInternalId, '\" not found for deletion.'));\n    // Depending on requirements, you might throw an error or just log a warning\n    // throw new Error(`Employee with internal ID \"${employeeInternalId}\" not found.`);\n    } else {\n        try {\n            localStorage.setItem(\"employees\", JSON.stringify(employees));\n            console.log(\"Employee deleted successfully.\");\n        // Optional: Delete associated attendance records (ensure this is also client-side safe)\n        // await deleteAttendanceRecordsForEmployee(employeeId); // Implement this if needed\n        } catch (error) {\n            console.error(\"Error saving employees after deletion to localStorage:\", error);\n            throw new Error(\"Failed to update employee list after deletion.\"); // Rethrow or handle appropriately\n        }\n    }\n};\n/**\n * Fetches a single employee by their user ID (phone or employeeId) from localStorage.\n * Needed for the attendance page to get employee details.\n */ const getEmployeeById = async (userId)=>{\n    console.log(\"Fetching employee data for ID/Phone: \".concat(userId));\n    if (false) {}\n    try {\n        const employees = await getEmployees();\n        const employee = employees.find((emp)=>emp.phone === userId || emp.employeeId === userId);\n        return employee || null;\n    } catch (error) {\n        console.error(\"Error fetching employee by ID:\", error);\n        return null;\n    }\n};\n// --- Attendance Management ---\n/**\n * Fetches all attendance records from localStorage, optionally filtered by date range.\n * Handles potential errors during access or parsing.\n */ const getAttendanceRecords = async (startDate, endDate)=>{\n    console.log(\"Fetching attendance records from localStorage. Dates: \".concat(startDate === null || startDate === void 0 ? void 0 : startDate.toISOString(), \" to \").concat(endDate === null || endDate === void 0 ? void 0 : endDate.toISOString()));\n    if (false) {}\n    let records = [];\n    try {\n        const recordsJson = localStorage.getItem(\"attendanceRecords\");\n        if (recordsJson) {\n            // Safely parse and ensure timestamp is a Date object\n            const parsedData = JSON.parse(recordsJson);\n            if (Array.isArray(parsedData)) {\n                records = parsedData.map((record)=>({\n                        ...record,\n                        // Ensure timestamp exists and is valid before creating Date\n                        timestamp: record.timestamp ? new Date(record.timestamp) : new Date(0),\n                        inTime: record.inTime ? new Date(record.inTime) : undefined,\n                        outTime: record.outTime ? new Date(record.outTime) : undefined\n                    })).filter((record)=>!isNaN(record.timestamp.getTime())); // Filter out records with invalid dates\n            } else {\n                console.warn(\"Attendance records in localStorage are not an array. Resetting.\");\n                localStorage.removeItem(\"attendanceRecords\");\n            }\n        }\n    } catch (error) {\n        console.error(\"Error fetching or parsing attendance records from localStorage:\", error);\n        // Optionally clear corrupted data: localStorage.removeItem('attendanceRecords');\n        return []; // Return empty array on error\n    }\n    // Filter by date range if provided\n    if (startDate || endDate) {\n        records = records.filter((record)=>{\n            if (!(record.timestamp instanceof Date) || isNaN(record.timestamp.getTime())) {\n                return false; // Skip records with invalid timestamps\n            }\n            const recordDate = record.timestamp;\n            // Set time to 00:00:00 for start date comparison\n            const start = startDate ? new Date(startDate.setHours(0, 0, 0, 0)) : null;\n            // Set time to 23:59:59 for end date comparison\n            const end = endDate ? new Date(endDate.setHours(23, 59, 59, 999)) : null;\n            const isAfterStart = start ? recordDate >= start : true;\n            const isBeforeEnd = end ? recordDate <= end : true;\n            // console.log(`Record ${record.id} timestamp: ${recordDate.toISOString()}, Start: ${start?.toISOString()}, End: ${end?.toISOString()}, Filter Result: ${isAfterStart && isBeforeEnd}`);\n            return isAfterStart && isBeforeEnd;\n        });\n    }\n    // Sort by timestamp, most recent first (descending)\n    records.sort((a, b)=>{\n        const timeA = a.timestamp instanceof Date ? a.timestamp.getTime() : 0;\n        const timeB = b.timestamp instanceof Date ? b.timestamp.getTime() : 0;\n        return timeB - timeA;\n    });\n    // console.log(`Filtered and sorted records count: ${records.length}`);\n    return records;\n};\n/**\n * Saves a new attendance record to localStorage.\n * Handles IN/OUT time logic.\n */ const saveAttendance = async (record)=>{\n    if (false) {}\n    console.log(\"Saving attendance record to localStorage (data):\", {\n        ...record,\n        photoDataUri: \"omitted for brevity\"\n    });\n    const allRecords = await getAttendanceRecords(); // Get all records first\n    // Assign a simple unique ID for localStorage demo\n    const newRecord = {\n        ...record,\n        id: \"att_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substring(2, 8)),\n        timestamp: new Date(record.timestamp)\n    };\n    // --- IN/OUT Time Logic ---\n    const todayStart = new Date(newRecord.timestamp);\n    todayStart.setHours(0, 0, 0, 0);\n    const todayEnd = new Date(todayStart);\n    todayEnd.setDate(todayStart.getDate() + 1);\n    // Find records for the same employee on the same calendar day\n    const todaysEmployeeRecords = allRecords.filter((r)=>r.employeeId === newRecord.employeeId && r.timestamp >= todayStart && r.timestamp < todayEnd).sort((a, b)=>a.timestamp.getTime() - b.timestamp.getTime()); // Sort oldest first\n    if (todaysEmployeeRecords.length === 0) {\n        // This is the first record of the day for this employee\n        newRecord.inTime = newRecord.timestamp;\n        newRecord.outTime = undefined; // Explicitly set outTime to undefined\n        console.log(\"Setting IN time for \".concat(newRecord.employeeId, \" on \").concat(todayStart.toDateString(), \": \").concat(newRecord.inTime.toLocaleTimeString()));\n    } else {\n        // This is a subsequent record for the day\n        // Use the IN time from the earliest record of the day\n        newRecord.inTime = todaysEmployeeRecords[0].inTime || todaysEmployeeRecords[0].timestamp; // Fallback to timestamp if inTime missing\n        // This new record becomes the latest OUT time for the day so far\n        newRecord.outTime = newRecord.timestamp;\n        console.log(\"Setting OUT time for \".concat(newRecord.employeeId, \" on \").concat(todayStart.toDateString(), \": \").concat(newRecord.outTime.toLocaleTimeString(), \" (In: \").concat(newRecord.inTime.toLocaleTimeString(), \")\"));\n        // --- Crucially, update the outTime on *previous* records for this day ---\n        // This ensures the Admin view shows the correct latest outTime for the day on all records of that day\n        todaysEmployeeRecords.forEach((existingRecord)=>{\n            if (existingRecord.id) {\n                const index = allRecords.findIndex((r)=>r.id === existingRecord.id);\n                if (index !== -1) {\n                    allRecords[index].outTime = newRecord.outTime; // Update the outTime\n                    allRecords[index].inTime = newRecord.inTime; // Also update inTime for consistency on older records\n                // console.log(`Updating existing record ${allRecords[index].id} with Out: ${newRecord.outTime.toLocaleTimeString()}, In: ${newRecord.inTime.toLocaleTimeString()}`);\n                }\n            }\n        });\n    }\n    // --- End IN/OUT Logic ---\n    // Add the *new* record to the main list\n    allRecords.unshift(newRecord); // Add to the beginning\n    // Filter out any potentially duplicated records before saving (just in case)\n    const uniqueRecords = Array.from(new Map(allRecords.map((item)=>[\n            item.id,\n            item\n        ])).values());\n    // Sort again before saving to maintain order (optional, but good practice)\n    uniqueRecords.sort((a, b)=>b.timestamp.getTime() - a.timestamp.getTime());\n    try {\n        localStorage.setItem(\"attendanceRecords\", JSON.stringify(uniqueRecords));\n        console.log(\"Attendance record saved: \".concat(newRecord.id, \", Total records now: \").concat(uniqueRecords.length));\n        return newRecord; // Return the newly created record with potentially added in/out times\n    } catch (error) {\n        console.error(\"Error saving attendance records to localStorage:\", error);\n        throw new Error(\"Failed to save attendance data.\"); // Rethrow or handle appropriately\n    }\n};\n// --- Utility Functions (Example) ---\n/**\n * Generates a CSV string from attendance records.\n */ const generateAttendanceCsv = (records)=>{\n    console.log(\"Generating CSV for \".concat(records.length, \" records.\"));\n    if (!records || records.length === 0) {\n        return \"\";\n    }\n    // Define headers carefully - match the order in the rows\n    const headers = [\n        \"Employee ID\",\n        \"Phone Number\",\n        \"Name\",\n        \"Date\",\n        \"Marked Time\",\n        \"In Time\",\n        \"Out Time\",\n        \"Shift Timing\",\n        \"Working Location\",\n        \"Latitude\",\n        \"Longitude\",\n        \"Address\",\n        \"Capture Method\"\n    ];\n    // Function to format date/time, handling undefined or invalid dates\n    const formatDateTime = (date, type)=>{\n        if (!date) return \"--\";\n        const d = date instanceof Date ? date : new Date(date); // Ensure it's a Date object\n        if (isNaN(d.getTime())) return \"Invalid Date\"; // Check if the date is valid\n        try {\n            if (type === \"date\") return d.toLocaleDateString();\n            if (type === \"time\") return d.toLocaleTimeString();\n            return \"--\";\n        } catch (e) {\n            console.error(\"Error formatting date:\", d, e);\n            return \"Format Error\";\n        }\n    };\n    // Helper to escape CSV fields containing commas or double quotes\n    const escapeCsvField = (field)=>{\n        if (field === undefined || field === null) return '\"\"';\n        const stringField = String(field);\n        // If the field contains a comma, double quote, or newline, enclose in double quotes and escape existing double quotes\n        if (stringField.includes(\",\") || stringField.includes('\"') || stringField.includes(\"\\n\")) {\n            return '\"'.concat(stringField.replace(/\"/g, '\"\"'), '\"');\n        }\n        return stringField; // Return as is if no special characters\n    };\n    const csvRows = [\n        headers.join(\",\"),\n        ...records.map((record)=>{\n            var _record_latitude, _record_longitude;\n            return [\n                escapeCsvField(record.employeeId),\n                escapeCsvField(record.phone),\n                escapeCsvField(record.name),\n                formatDateTime(record.timestamp, \"date\"),\n                formatDateTime(record.timestamp, \"time\"),\n                formatDateTime(record.inTime, \"time\"),\n                formatDateTime(record.outTime, \"time\"),\n                escapeCsvField(record.shiftTiming),\n                escapeCsvField(record.workingLocation),\n                escapeCsvField((_record_latitude = record.latitude) === null || _record_latitude === void 0 ? void 0 : _record_latitude.toFixed(6)),\n                escapeCsvField((_record_longitude = record.longitude) === null || _record_longitude === void 0 ? void 0 : _record_longitude.toFixed(6)),\n                escapeCsvField(record.address),\n                escapeCsvField(record.captureMethod)\n            ].join(\",\");\n        }) // Join values into a CSV row\n    ];\n    return csvRows.join(\"\\n\"); // Join rows with newline characters\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/attendance.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/auth.ts":
/*!******************************!*\
  !*** ./src/services/auth.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticateUser: function() { return /* binding */ authenticateUser; },\n/* harmony export */   checkLoginStatus: function() { return /* binding */ checkLoginStatus; },\n/* harmony export */   logoutUser: function() { return /* binding */ logoutUser; },\n/* harmony export */   storeLoginSession: function() { return /* binding */ storeLoginSession; }\n/* harmony export */ });\n/* harmony import */ var _attendance__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./attendance */ \"(app-pages-browser)/./src/services/attendance.ts\");\n// Functions using localStorage are inherently client-side dependent.\n\n// For this example, admin password. NEVER do this in production for real credentials.\nconst ADMIN_PASSWORD = \"12345\";\n/**\n * Authenticates a user based on userId and password.\n * Checks against localStorage for employee data or admin credentials.\n * NOTE: Using localStorage makes this inherently client-side dependent.\n * If called during SSR without checks, it will fail.\n * Ensure this is only called from client components or within useEffect/event handlers.\n *\n * @param userId - The user ID (employee phone number or 'admin').\n * @param password - The password (only required for admin).\n * @returns Promise<boolean> - True if authentication is successful, false otherwise.\n */ const authenticateUser = async (userId, password)=>{\n    console.log('[AuthService] authenticateUser: Attempting for userId: \"'.concat(userId, '\"'));\n    const trimmedUserId = typeof userId === \"string\" ? userId.trim() : \"\";\n    try {\n        if (trimmedUserId.toLowerCase() === \"admin\") {\n            const isAdmin = password === ADMIN_PASSWORD;\n            console.log('[AuthService] authenticateUser: Admin login attempt. Password provided: \"'.concat(password ? \"******\" : \"undefined\", '\". Result: ').concat(isAdmin));\n            return isAdmin;\n        } else {\n            if (true) {\n                const employees = await (0,_attendance__WEBPACK_IMPORTED_MODULE_0__.getEmployees)();\n                const employeeExists = employees.some((emp)=>emp.phone === trimmedUserId);\n                console.log('[AuthService] authenticateUser: Employee login attempt for phone \"'.concat(trimmedUserId, '\". Result: ').concat(employeeExists));\n                return employeeExists;\n            } else {}\n        }\n    } catch (error) {\n        console.error(\"[AuthService] authenticateUser: Error during authentication:\", error);\n        return false;\n    }\n};\n/**\n * Checks if a user is currently logged in based on localStorage.\n * NOTE: Inherently client-side.\n * @returns string | null - The logged-in user ID (trimmed, and 'admin' is lowercased) or null if not logged in or empty.\n */ const checkLoginStatus = ()=>{\n    if (true) {\n        try {\n            const storedValue = localStorage.getItem(\"loggedInUser\");\n            console.log('[AuthService] checkLoginStatus: Value from localStorage: \"'.concat(storedValue, '\"'));\n            if (storedValue) {\n                const trimmedValue = storedValue.trim();\n                console.log('[AuthService] checkLoginStatus: Trimmed value: \"'.concat(trimmedValue, '\"'));\n                if (trimmedValue.toLowerCase() === \"admin\") {\n                    console.log('[AuthService] checkLoginStatus: Recognized as admin. Returning \"admin\".');\n                    return \"admin\";\n                }\n                if (trimmedValue !== \"\") {\n                    console.log('[AuthService] checkLoginStatus: Recognized as non-admin user. Returning \"'.concat(trimmedValue, '\".'));\n                    return trimmedValue;\n                }\n                console.log(\"[AuthService] checkLoginStatus: Value was empty after trim. Returning null.\");\n                // localStorage.removeItem('loggedInUser'); // Clear if empty after trim\n                return null;\n            }\n            console.log(\"[AuthService] checkLoginStatus: No value found in localStorage. Returning null.\");\n            return null;\n        } catch (error) {\n            console.error(\"[AuthService] checkLoginStatus: Error accessing localStorage:\", error);\n            return null;\n        }\n    }\n    console.warn(\"[AuthService] checkLoginStatus: Called on server-side. localStorage not available. Returning null.\");\n    return null;\n};\n/**\n * Logs the user out by removing the flag from localStorage.\n * NOTE: Inherently client-side.\n */ const logoutUser = ()=>{\n    if (true) {\n        try {\n            const oldValue = localStorage.getItem(\"loggedInUser\");\n            localStorage.removeItem(\"loggedInUser\");\n            console.log('[AuthService] logoutUser: User logged out. Previous localStorage value was \"'.concat(oldValue, '\".'));\n        } catch (error) {\n            console.error(\"[AuthService] logoutUser: Error removing item from localStorage during logout:\", error);\n        }\n    } else {}\n};\n/**\n * Stores the logged-in user's ID in localStorage.\n * If the user is 'admin' (case-insensitive), it's stored as lowercase 'admin'.\n * NOTE: Inherently client-side.\n * @param userId - The ID of the user to store.\n */ const storeLoginSession = (userId)=>{\n    if (true) {\n        try {\n            let valueToStore = typeof userId === \"string\" ? userId.trim() : \"\";\n            console.log('[AuthService] storeLoginSession: Original userId: \"'.concat(userId, '\", Trimmed for storage: \"').concat(valueToStore, '\"'));\n            if (valueToStore.toLowerCase() === \"admin\") {\n                valueToStore = \"admin\"; // Standardize to lowercase 'admin' for storage\n                console.log('[AuthService] storeLoginSession: User is admin, standardized to: \"'.concat(valueToStore, '\" for storage.'));\n            }\n            localStorage.setItem(\"loggedInUser\", valueToStore);\n            console.log('[AuthService] storeLoginSession: Successfully stored \"'.concat(valueToStore, '\" in localStorage for key \"loggedInUser\".'));\n        } catch (error) {\n            console.error(\"[AuthService] storeLoginSession: Error storing login session in localStorage:\", error);\n        }\n    } else {}\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/auth.ts\n"));

/***/ })

});